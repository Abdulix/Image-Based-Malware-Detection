# utils.py
from PIL import Image
import io
import cv2
import numpy as np
from math import sqrt, ceil

def convert_to_grayscale_image(binary_data):
    # Convert binary data into a grayscale image
    # Data length in bytes
    data_len = len(binary_data)

    # d is a verctor of data_len bytes
    d = np.frombuffer(binary_data, dtype=np.uint8)

    # Assume image shape should be close to square
    sqrt_len = int(ceil(sqrt(data_len)))  # Compute square root and round up

    # Requiered length in bytes.
    new_len = sqrt_len * sqrt_len

    # Number of bytes to pad (need to add zeros to the end of d)
    pad_len = new_len - data_len

    # Pad d with zeros at the end.
    # padded_d = np.pad(d, (0, pad_len))
    padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))

    # Reshape 1D array into 2D array with sqrt_len pad_len x sqrt_len (im is going to be a Grayscale image).
    im = np.reshape(padded_d, (sqrt_len, sqrt_len))

    # Save image (optional)
    cv2.imwrite('uploaded_image.png', im)  # Save the uploaded image as PNG

    # Convert numpy array to PIL Image
    pil_img = Image.fromarray(im.astype('uint8'), 'L')  # 'L' mode represents grayscale
    return pil_img

def resize_image(img, size):
    # Resize the image to the specified size
    img = img.resize(size)
    return img
